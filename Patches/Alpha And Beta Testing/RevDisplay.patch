Index: trunk/rewrite/src/common/cbasetypes.h
===================================================================
--- trunk/rewrite/src/common/cbasetypes.h	(revision 691)
+++ trunk/rewrite/src/common/cbasetypes.h	(working copy)
@@ -298,10 +298,14 @@
 
 #if defined(WIN32)
 #define PATHSEP '\\'
+#define PATHSEP_STR "\\"
 #elif defined(__APPLE__)
+// FIXME Mac OS X is unix based, is this still correct?
 #define PATHSEP ':'
+#define PATHSEP_STR ":"
 #else
 #define PATHSEP '/'
+#define PATHSEP_STR "/"
 #endif
 
 //////////////////////////////////////////////////////////////////////////
@@ -356,3 +360,12 @@
 #endif
 
 #endif /* _CBASETYPES_H_ */
+
+//////////////////////////////////////////////////////////////////////////
+// Use the preprocessor to 'stringify' stuff (concert to a string).
+// example:
+//   #define TESTE blabla
+//   QUOTE(TESTE) -> "TESTE"
+//   EXPAND_AND_QUOTE(TESTE) -> "blabla"
+#define QUOTE(x) #x
+#define EXPAND_AND_QUOTE(x) QUOTE(x)
Index: trunk/rewrite/src/common/core.c
===================================================================
--- trunk/rewrite/src/common/core.c	(revision 691)
+++ trunk/rewrite/src/common/core.c	(working copy)
@@ -30,9 +30,6 @@
 
 char *SERVER_NAME = NULL;
 char SERVER_TYPE = ATHENA_SERVER_NONE;
-#ifndef SVNVERSION
-	static char eA_svn_version[10] = "";
-#endif
 
 #ifndef MINICORE	// minimalist Core
 // Added by Gabuzomeu
@@ -119,20 +116,69 @@
 #endif
 
 #ifdef SVNVERSION
-	#define xstringify(x) stringify(x)
-	#define stringify(x) #x
 	const char *get_svn_revision(void)
 	{
-		return xstringify(SVNVERSION);
+		return EXPAND_AND_QUOTE(SVNVERSION);
 	}
 #else// not SVNVERSION
 const char* get_svn_revision(void)
 {
+	static char svn_version_buffer[16] = "";
 	FILE *fp;
 
-	if(*eA_svn_version)
-		return eA_svn_version;
+	if( svn_version_buffer[0] != '\0' )
+		return svn_version_buffer;
 
+	// subversion 1.7 uses a sqlite3 database
+	// FIXME this is hackish at best...
+	// - ignores database file structure
+	// - assumes the data in NODES.dav_cache column ends with "!svn/ver/<revision>/<path>)"
+	// - since it's a cache column, the data might not even exist
+	if( (fp = fopen(".svn"PATHSEP_STR"wc.db", "rb")) != NULL || (fp = fopen(".."PATHSEP_STR".svn"PATHSEP_STR"wc.db", "rb")) != NULL )
+	{
+	#ifndef SVNNODEPATH
+		//not sure how to handle branches, so i'll leave this overridable define until a better solution comes up
+		#define SVNNODEPATH trunk
+	#endif
+		const char* prefix = "!svn/ver/";
+		const char* postfix = "/"EXPAND_AND_QUOTE(SVNNODEPATH)")"; // there should exist only 1 entry like this
+		size_t prefix_len = strlen(prefix);
+		size_t postfix_len = strlen(postfix);
+		size_t i,j,len;
+		char* buffer;
+
+		// read file to buffer
+		fseek(fp, 0, SEEK_END);
+		len = ftell(fp);
+		buffer = (char*)aMalloc(len + 1);
+		fseek(fp, 0, SEEK_SET);
+		len = fread(buffer, 1, len, fp);
+		buffer[len] = '\0';
+		fclose(fp);
+
+		// parse buffer
+		for( i = prefix_len + 1; i + postfix_len <= len; ++i )
+		{
+			if( buffer[i] != postfix[0] || memcmp(buffer + i, postfix, postfix_len) != 0 )
+				continue; // postfix missmatch
+			for( j = i; j > 0; --j )
+			{// skip digits
+				if( !ISDIGIT(buffer[j - 1]) )
+					break;
+			}
+			if( memcmp(buffer + j - prefix_len, prefix, prefix_len) != 0 )
+				continue; // prefix missmatch
+			// done
+			snprintf(svn_version_buffer, sizeof(svn_version_buffer), "%d", atoi(buffer + j));
+			break;
+		}
+		aFree(buffer);
+
+		if( svn_version_buffer[0] != '\0' )
+			return svn_version_buffer;
+	}
+
+	// subversion 1.6 and older?
 	if ((fp = fopen(".svn/entries", "r")) != NULL)
 	{
 		char line[1024];
@@ -146,7 +192,7 @@
 				while (fgets(line,sizeof(line),fp))
 					if (strstr(line,"revision=")) break;
 				if (sscanf(line," %*[^\"]\"%d%*[^\n]", &rev) == 1) {
-					snprintf(eA_svn_version, sizeof(eA_svn_version), "%d", rev);
+					snprintf(svn_version_buffer, sizeof(svn_version_buffer), "%d", rev);
 				}
 			}
 			else
@@ -156,17 +202,19 @@
 				fgets(line, sizeof(line), fp); // Get the entries kind
 				if(fgets(line, sizeof(line), fp)) // Get the rev numver
 				{
-					snprintf(eA_svn_version, sizeof(eA_svn_version), "%d", atoi(line));
+					snprintf(svn_version_buffer, sizeof(svn_version_buffer), "%d", atoi(line));
 				}
 			}
 		}
 		fclose(fp);
+
+		if( svn_version_buffer[0] != '\0' )
+			return svn_version_buffer;
 	}
 
-	if(!(*eA_svn_version))
-		snprintf(eA_svn_version, sizeof(eA_svn_version), "Unknown");
-
-	return eA_svn_version;
+	// fallback
+	snprintf(svn_version_buffer, sizeof(svn_version_buffer), "Unknown");
+	return svn_version_buffer;
 }
 #endif
 
@@ -191,7 +239,7 @@
 	ShowMessage(""CL_XXBL"          ("CL_BOLD" ( e | n | g | l | i | s | h ) ( A | t | h | e | n | a ) "CL_XXBL")"CL_CLL""CL_NORMAL"\n");
 	ShowMessage(""CL_XXBL"          ("CL_BOLD"  \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/   \\_/ \\_/ \\_/ \\_/ \\_/ \\_/  "CL_XXBL")"CL_CLL""CL_NORMAL"\n");
 	ShowMessage(""CL_XXBL"          ("CL_BOLD"                                                         "CL_XXBL")"CL_CLL""CL_NORMAL"\n");
-	ShowMessage(""CL_XXBL"          ("CL_BT_YELLOW"              3rd Class Modification Project             "CL_XXBL")"CL_CLL""CL_NORMAL"\n");
+	ShowMessage(""CL_XXBL"          ("CL_BT_YELLOW"       3CeAM 3rd Class eAthena Modification Project      "CL_XXBL")"CL_CLL""CL_NORMAL"\n");
 	ShowMessage(""CL_WTBL"          (=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=)"CL_CLL""CL_NORMAL"\n\n");
 
 	ShowInfo("SVN Revision: '"CL_WHITE"%s"CL_RESET"'.\n", get_svn_revision());
